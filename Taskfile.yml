version: '3'

output: 'prefixed'

tasks:

  code-format:
    cmds:
      - >
        poetry run autoflake
        --exclude '*.local*'
        --expand-star-imports
        --in-place
        --recursive
        --remove-all-unused-imports
        --remove-duplicate-keys
        --remove-unused-variables
        --verbose
        .
      - poetry run black .
    desc: format code with autoflake, black
    dir: "{{.ROOT_DIR}}"
    platforms:
      - darwin

  code-lint:
    cmds:
      - test -f "{{.DIR_LOCAL}}/ok.code-lint-black"
      - test -f "{{.DIR_LOCAL}}/ok.code-lint-flake8"
      - test -f "{{.DIR_LOCAL}}/ok.code-lint-mypy"
      - echo 'all linters passed'
    deps:
      - code-lint-black
      - code-lint-mypy
      - code-lint-flake8
    desc: validate code using linters
    dir: "{{.ROOT_DIR}}"
    silent: true

  code-lint-black:
    cmds:
      - >
        rm -f "{{.DIR_LOCAL}}/ok.{{.TASK}}"
        && poetry run black --skip-string-normalization --diff --check .
        && touch "{{.DIR_LOCAL}}/ok.{{.TASK}}"
    dir: "{{.ROOT_DIR}}"
    ignore_error: true
    internal: true
  code-lint-mypy:
    cmds:
      - >
        rm -f "{{.DIR_LOCAL}}/ok.{{.TASK}}"
        && poetry run mypy --config-file="{{.ROOT_DIR}}/pyproject.toml"
        && touch "{{.DIR_LOCAL}}/ok.{{.TASK}}"
    dir: "{{.ROOT_DIR}}/project"
    env:
      DATABASE_URL: "sqlite://:memory:"
    ignore_error: true
    internal: true
  code-lint-flake8:
    cmds:
      - >
        rm -f "{{.DIR_LOCAL}}/ok.{{.TASK}}"
        && poetry run flake8 --config="{{.ROOT_DIR}}/.flake8" .
        && touch "{{.DIR_LOCAL}}/ok.{{.TASK}}"
    dir: "{{.ROOT_DIR}}"
    ignore_error: true
    internal: true

  collect-static:
    cmds:
      - poetry run python manage.py collectstatic --noinput
    desc: collect static
    dir: "{{.ROOT_DIR}}"
    env:
      MSSQL_DATABASE_HOST: xxx
      MSSQL_DATABASE_NAME: xxx
      MSSQL_DATABASE_PASSWORD: xxx
      MSSQL_DATABASE_PORT: 1433
      MSSQL_DATABASE_USERNAME: xxx
      MSSQL_SECRET_KEY: xxx
    platforms:
      - darwin
    run: once

  db-migrate:
    cmds:
      - poetry run python manage.py migrate
    desc: migrate db
    dir: "{{.ROOT_DIR}}"
    platforms:
      - darwin
    run: once

  db-migrate-dev:
    cmds:
      - poetry run python manage.py makemigrations
      - task: code-format
      - task: db-migrate
    desc: create migrations and migrate
    dir: "{{.ROOT_DIR}}"
    platforms:
      - darwin
    run: once

  docker-standalone:
    cmds:
      - >
        docker build
        --build-arg PIP_VERSION="{{.PIP_VERSION}}"
        --build-arg POETRY_VERSION="{{.POETRY_VERSION}}"
        --build-arg PYTHON_VERSION="{{.PYTHON_VERSION}}"
        --tag iteen2.webapp:standalone
        .
      - install -d -m 0777 "{{.ROOT_DIR}}/.local/standalone/"
      - >
        docker run
        --domainname webapp
        --env DATABASE_URL="sqlite:////tmp/standalone/standalone.sqlite3"
        --env SECRET_KEY=1
        --hostname webapp
        --init
        --interactive
        --mount type=bind,src="{{.ROOT_DIR}}/.local/standalone/,dst=/tmp/standalone"
        --name iteen2.webapp.standalone
        --publish "8000:8000"
        --read-only
        --rm
        --tty
        iteen2.webapp:standalone
    desc: build and run standalone image/container
    dir: "{{.ROOT_DIR}}"
    interactive: true
    platforms:
      - darwin
    preconditions:
      - docker info
    run: once

  docker-down:
    cmds:
      - docker compose down --remove-orphans
    desc: stop all services
    dir: "{{.ROOT_DIR}}"
    platforms:
      - darwin
    preconditions:
      - docker info
    run: once

  docker-up:
    cmds:
      - docker compose up --detach --remove-orphans --wait {{.CLI_ARGS}}
    desc: start all ( `-- [<service> ...]`) services
    dir: "{{.ROOT_DIR}}"
    platforms:
      - darwin
    preconditions:
      - docker info
    run: once

  run-server-dev:
    cmds:
      - >
        poetry run
        python manage.py
        runserver
        0.0.0.0:8000
    desc: run Django dev server
    dir: "{{.ROOT_DIR}}"
    dotenv:
      - .env
    platforms:
      - darwin
    run: once

  run-server-prod:
    cmds:
      - >
        poetry run
        gunicorn
        -b 0.0.0.0:80
        project.wsgi:application
    desc: run Gunicorn on 0.0.0.0:80
    dir: "{{.ROOT_DIR}}"
    dotenv:
      - .env
    platforms:
      - darwin
    run: once

  run-tests:
    cmds:
      - >
        curl
        --connect-timeout 12
        --fail-with-body
        --header "Accept: application/json;q=1,text/plain;q=0.9,text/html;q=0.8"
        --header "Cache-Control: no-cache,no-store,no-transform,max-age=0"
        --location
        --max-redirs 1
        --max-time 24
        --no-keepalive
        --request GET
        --user-agent 'Johhny The Vindicator/1.0'
        http://localhost:8000
    desc: run tests
    dir: "{{.ROOT_DIR}}"
    platforms:
      - darwin
    run: once

  setup-toolchain:
    cmds:
      - task: setup-toolchain-macos
      - pyenv install --skip-existing "{{.PYTHON_VERSION}}"
      - pip install --upgrade "pip=={{.PIP_VERSION}}"
      - pip install --upgrade "poetry=={{.POETRY_VERSION}}"
      - poetry env use "{{.PYTHON_VERSION}}"
      - poetry install --with dev --sync
    desc: "setup developer's toolchain: Pyenv, Python, Poetry, venv"
    dir: "{{.ROOT_DIR}}"
    platforms:
      - darwin
    preconditions:
      - pyenv --version

  setup-toolchain-macos:
    cmds:
      - brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release
      - brew update
      - >
        brew install
        msodbcsql18
        mssql-tools18
        pyenv
        unixodbc
      - odbcinst -j
    desc: "setup MacOS"
    dir: "{{.ROOT_DIR}}"
    env:
      HOMEBREW_ACCEPT_EULA: Y
    internal: true
    platforms:
      - darwin
    preconditions:
      - brew --version

vars:
  DIR_LOCAL:
    sh: (cd "{{.ROOT_DIR}}"/.local && pwd) || echo '.local'
  DIR_VENV:
    sh: cd "$(poetry env info --path)" && pwd
  PIP_VERSION:
    sh: cat .env | grep BUILD_PIP_VERSION | sed -e 's/^.*=//g'
  POETRY_VERSION:
    sh: cat .env | grep BUILD_POETRY_VERSION | sed -e 's/^.*=//g'
  PYTHON_VERSION:
    sh: cat .env | grep BUILD_PYTHON_VERSION | sed -e 's/^.*=//g'


env:
  PYTHONPATH: "{{.ROOT_DIR}}"
